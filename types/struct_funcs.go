// File generated by Gopher Sauce
// DO NOT EDIT!!
package types

import (
	"encoding/json"
	"log"

	"github.com/cheikhshift/db"
)

// Asserts first argument, a map, as struct
// Choice. This function is used with template functionality.
func CastChoice(args ...interface{}) *Choice {

	s := Choice{}
	mapp := args[0].(db.O)
	if _, ok := mapp["_id"]; ok {
		mapp["Id"] = mapp["_id"]
	}
	data, _ := json.Marshal(&mapp)

	err := json.Unmarshal(data, &s)
	if err != nil {
		log.Println(err.Error())
	}

	return &s
}

// Create a new Choice struct and return the pointer.
func NewChoice() *Choice { return &Choice{} }

// Asserts first argument, a map, as struct
// Question. This function is used with template functionality.
func CastQuestion(args ...interface{}) *Question {

	s := Question{}
	mapp := args[0].(db.O)
	if _, ok := mapp["_id"]; ok {
		mapp["Id"] = mapp["_id"]
	}
	data, _ := json.Marshal(&mapp)

	err := json.Unmarshal(data, &s)
	if err != nil {
		log.Println(err.Error())
	}

	return &s
}

// Create a new Question struct and return the pointer.
func NewQuestion() *Question { return &Question{} }

// Asserts first argument, a map, as struct
// Group. This function is used with template functionality.
func CastGroup(args ...interface{}) *Group {

	s := Group{}
	mapp := args[0].(db.O)
	if _, ok := mapp["_id"]; ok {
		mapp["Id"] = mapp["_id"]
	}
	data, _ := json.Marshal(&mapp)

	err := json.Unmarshal(data, &s)
	if err != nil {
		log.Println(err.Error())
	}

	return &s
}

// Create a new Group struct and return the pointer.
func NewGroup() *Group { return &Group{} }

// Asserts first argument, a map, as struct
// Progress. This function is used with template functionality.
func CastProgress(args ...interface{}) *Progress {

	s := Progress{}
	mapp := args[0].(db.O)
	if _, ok := mapp["_id"]; ok {
		mapp["Id"] = mapp["_id"]
	}
	data, _ := json.Marshal(&mapp)

	err := json.Unmarshal(data, &s)
	if err != nil {
		log.Println(err.Error())
	}

	return &s
}

// Create a new Progress struct and return the pointer.
func NewProgress() *Progress { return &Progress{} }
